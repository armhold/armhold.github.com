<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[George Armhold's Blog]]></title>
  <link href="http://armhold.github.com/atom.xml" rel="self"/>
  <link href="http://armhold.github.com/"/>
  <updated>2012-08-21T11:39:59-04:00</updated>
  <id>http://armhold.github.com/</id>
  <author>
    <name><![CDATA[George Armhold]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Blog Moved to Github/Octopress]]></title>
    <link href="http://armhold.github.com/2012/08/19/trying-out-octopress/"/>
    <updated>2012-08-19T12:24:00-04:00</updated>
    <id>http://armhold.github.com/2012/08/19/trying-out-octopress</id>
    <content type="html"><![CDATA[<p>I&#8217;m experimenting with <a href="http://octopress.org">Octopress</a> as a potential Wordpress replacement.</p>

<p>I&#8217;ve grown tired of trying to properly format code with the Wordpress editor, so I&#8217;ve moved my blog from
Wordpress (and before that Blogger) to Jekyll + Octopress, hosted on <a href="http://github.com">Github</a>.</p>

<p>Let&#8217;s see how code formats under Octopress:</p>

<figure class='code'><figcaption><span>print_tree</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="k">def</span> <span class="nf">print_tree</span><span class="p">(</span><span class="n">node</span><span class="p">,</span> <span class="n">indent</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="nb">puts</span> <span class="n">indent</span> <span class="o">+</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">node</span><span class="si">}</span><span class="s2"> -&gt; &quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="n">node</span><span class="o">.</span><span class="n">kind_of?</span> <span class="no">Container</span>
</span><span class='line'>      <span class="n">node</span><span class="o">.</span><span class="n">children</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">child</span><span class="o">|</span>
</span><span class='line'>        <span class="n">print_tree</span><span class="p">(</span><span class="n">child</span><span class="p">,</span> <span class="n">indent</span> <span class="o">+</span> <span class="no">Control</span><span class="o">::</span><span class="no">INDENT</span><span class="p">)</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Beautiful!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pixlshare-Rebooted]]></title>
    <link href="http://armhold.github.com/2012/05/23/pixlshare-rebooted/"/>
    <updated>2012-05-23T20:06:00-04:00</updated>
    <id>http://armhold.github.com/2012/05/23/pixlshare-rebooted</id>
    <content type="html"><![CDATA[<p>In order to dive into Ruby, I decided to convert <a href="http://pixlshare.com">Pixlshare</a> from Java+Wicket to Ruby on Rails.</p>

<p>It&#8217;s an admittedly small project, but I was surprised how easy it was. I had it basically working in under a day, and
polished enough for production use in under 2 days.</p>

<p>But the best part was the code size: a reduction of <strong>6 to 1</strong> going from Java -> Ruby.</p>

<p><a href="http://pixlshare.com"><img src="http://armhold.github.com/images/2012-08-19/pixlshare.png" alt="pixlshare" /></a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Twilio and Adobe Flash]]></title>
    <link href="http://armhold.github.com/2012/02/19/twilio-and-adobe-flash/"/>
    <updated>2012-02-19T09:26:22-05:00</updated>
    <id>http://armhold.github.com/2012/02/19/twilio-and-adobe-flash</id>
    <content type="html"><![CDATA[<p>I started doing some <a href="http://www.twilio.com/api/sms">Twilio development</a> recently and ran into a problem with Adobe Flash. <a href="http://www.twilio.com/api/client">Twilio Client</a> (which lets you make phone calls right from your browser) relies on the Flash plugin. It pops up this nice little settings dialog the first time it runs to ask your permission:</p>

<p><img src="http://armhold.github.com/images/2012/02/flash.png" alt="image" /></p>

<p>The problem is that on Chrome, <strong>it won&#8217;t let you actually click any of those buttons</strong>- the dialog is non-responsive to mouse clicks. This was really frustrating, and a few minutes of Googling showed that this was an old problem supposedly fixed by a Flash update months ago.</p>

<p>Updating to the latest Flash didn&#8217;t help (it&#8217;s apparently bundled with Chrome, and doesn&#8217;t use the version you can install manually on OSX).</p>

<p>Then I came across <a href="http://reviews.cnet.com/8301-13727_7-20090579-263/adobe-flash-update-fixes-unresponsive-settings-in-os-x-lion/">this trick</a>: use tab to navigate the dialog checkboxes, and spacebar to select/deselect. Works like a charm.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Announcing: Wicket-Source plugin for Intellij IDEA]]></title>
    <link href="http://armhold.github.com/2012/02/16/announcing-wicket-source-plugin-for-intellij-idea/"/>
    <updated>2012-02-16T07:06:07-05:00</updated>
    <id>http://armhold.github.com/2012/02/16/announcing-wicket-source-plugin-for-intellij-idea</id>
    <content type="html"><![CDATA[<p>The folks at <a href="https://www.42lines.net/">42lines</a> have released an awesome <a href="https://www.42lines.net/2012/01/31/announcing-wicket-source/">Firefox plugin</a> called &#8220;Wicket-Source&#8221;. It allows you to easily navigate from your browser to the corresponding Wicket source code.</p>

<p>Since their plugin is Eclipse-based, I wrote up a compatible plugin for Intellij IDEA. You can install it from <a href="http://plugins.intellij.net/plugin/?idea&amp;id=6846">the repository</a>, or build it yourself from the <a href="https://github.com/armhold/wicket-source-intellij">source on Github</a>.</p>

<p>There are two parts to this plugin: the Firefox extension (provided by 42lines) and the IDE plugin; you need both. To install the Firefox plugin, follow the <a href="https://github.com/42Lines/wicket-source/wiki">directions from 42lines</a>. Then to install the Intellij plugin do the following:</p>

<ol>
<li><p>Open the Preferences dialog (Intellij IDEA menu -> Preferences)</p></li>
<li><p>Under &#8220;IDE Settings&#8221; select &#8220;Plugins&#8221;</p></li>
<li><p>Click the &#8220;Browse Repositories&#8221; button.</p></li>
<li><p>In the search box type &#8220;wicket&#8221;, which should narrow the results significantly.</p></li>
<li><p>Right-click &#8220;Wicket Source&#8221;, and select &#8220;Download and Install&#8221;.</p></li>
</ol>


<p>You&#8217;ll be asked to re-start Intellij, and then you should be in business. The plugin uses port Â 9123 and no password by default (same as the Firefox plugin defaults). To change this, open the IDE Settings dialog and click &#8220;Wicket Source&#8221; to enter a password.</p>

<p>Enjoy!</p>

<p><img src="http://armhold.github.com/images/2012/02/wicket-source.png" alt="image" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Wicket: submitting a form over SSL from an unsecured page]]></title>
    <link href="http://armhold.github.com/2012/01/21/wicket-submitting-a-form-over-ssl-from-an-unsecured-page/"/>
    <updated>2012-01-21T13:54:37-05:00</updated>
    <id>http://armhold.github.com/2012/01/21/wicket-submitting-a-form-over-ssl-from-an-unsecured-page</id>
    <content type="html"><![CDATA[<p>Lots of folks are making great use of <a href="http://twitter.github.com/bootstrap/">Twitter Bootstrap</a>, which includes a handy login button right at the top:</p>

<p><img src="http://armhold.github.com/images/2012/01/twitter-bootstrap-wicket1.png" alt="image" /></p>

<p>To protect your users&#8217; privacy, you should make sure that form is sent over SSL. If the hosting page is https that happens automatically, but most domains don&#8217;t secure their entire site; only a subset of pages are typically secured with SSL. But since this header likely appears on <em>all your pages</em>, how can you secure the form?</p>

<p>The first step is to manually adjust the form&#8217;s <strong>action</strong> attribute to ensure that the form submission happens over https, rather than http.</p>

<p>But this is where we run into a problem with Wicket- if the hosting page is http, and you have also installed an HttpsMapper in your WicketApplication like this:</p>

<pre><code>setRootRequestMapper(new HttpsMapper(getRootRequestMapper(), new HttpsConfig(HTTP_PORT, HTTPS_PORT)));
</code></pre>

<p>then Wicket will not allow your form to be sent over https; the mapper will notice the http/https mismatch, and instead of calling your form&#8217;s onSubmit() method, it will simply serve up the hosting page again, discarding your form submission.</p>

<p>The solution is to manually post your form to a different, secure page that is marked for https via @RequireHttps. Then the HttpsMapper will allow the form submission to take place.</p>

<p>First, we need a LoginForm that will adjust the form&#8217;s <strong>action</strong> attribute to point to our secure page:</p>

<pre><code>public class LoginForm extends StatelessForm
{
    public LoginForm(String id)
    {
        super(id);
        add(new TextField("username").setRequired(true));
        add(new PasswordTextField("password").setRequired(true));
    }

   @Override
   protected void onComponentTag(ComponentTag tag)
   {
       super.onComponentTag(tag);
       String action = urlFor(LoginFormHandlerPage.class, null).toString();
       tag.put("action", action);
   }
}
</code></pre>

<p>Now we&#8217;ll need to create a page to handle the form submission:</p>

<pre><code>@RequireHttps
public class LoginFormHandlerPage extends WebPage
{
    public LoginFormHandlerPage(PageParameters parameters)
    {
        HttpServletRequest req = (HttpServletRequest) getRequest().getContainerRequest();
        String username = req.getParameter("username");
        String password = req.getParameter("password");

        if (loginSuccessful(username, password))
        {
             if (! continueToOriginalDestination());
             {
                 setResponsePage(AccountPage.class);
             }
        }
        else
        {
            getSession().error("login failed"));
            // on failure send user to our regular login page
            setResponsePage(LoginPage.class);
        }
    }
}
</code></pre>

<p>Note that if you&#8217;re using Wicket 1.5.3 <a href="https://issues.apache.org/jira/browse/WICKET-4338">there is a bug</a>Â that prevents the processing of form POST parameters (that&#8217;s why we&#8217;re reading the params manually from the HttpServletRequest). Fixed in Wicket 1.5.4.</p>

<p>The LoginFormHandlerPage will process the submitted form data over https, and if successful, log the user in, else send them to a page where then can re-enter their password.</p>

<p>You can get all the code (and quite a bit more useful login-related stuff) fromÂ <a href="https://github.com/armhold/justaddwater">github</a>.</p>

<p>Credit where it&#8217;s due: the real gem here (submitting the form to a secure url) comes fromÂ this <a href="http://www.petrikainulainen.net/programming/tips-and-tricks/wicket-https-tutorial-part-three-creating-a-secure-form-submit-from-a-non-secure-page/">blog posting</a> byÂ Petri Kainulainen.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to get JNDI working with Wicket 1.5 and Jetty 7.5]]></title>
    <link href="http://armhold.github.com/2011/12/27/how-to-get-jndi-working-with-wicket-1-5-and-jetty-7-5/"/>
    <updated>2011-12-27T22:29:03-05:00</updated>
    <id>http://armhold.github.com/2011/12/27/how-to-get-jndi-working-with-wicket-1-5-and-jetty-7-5</id>
    <content type="html"><![CDATA[<p>The Wicket 1.5 archetype sets up a project to use Jetty 7.5. Quite a lot has changed in Jetty since version 6, and this broke my JNDI config. Here&#8217;s how I put things right again.</p>

<p>First of all, the imports have all been moved in 7.x. Â Here&#8217;s where they landed:</p>

<pre><code>import org.eclipse.jetty.plus.webapp.EnvConfiguration;
import org.eclipse.jetty.webapp.WebInfConfiguration;
import org.eclipse.jetty.webapp.Configuration;
import org.eclipse.jetty.webapp.WebXmlConfiguration;
</code></pre>

<p>Next, you&#8217;ll need a jetty-env.xml.</p>

<pre><code>&lt;?xml version="1.0"?&gt;
&lt;!DOCTYPE Configure PUBLIC "-//Mort Bay Consulting//DTD Configure//EN" "http://www.eclipse.org/jetty/configure.dtd"&gt;

&lt;Configure id="wac" class="org.eclipse.jetty.webapp.WebAppContext"&gt;
    &lt;New class="org.eclipse.jetty.plus.jndi.EnvEntry"&gt;
    &lt;Arg&gt;jdbc/mydatasource&lt;/Arg&gt;
    &lt;Arg&gt;
        &lt;New class="com.mysql.jdbc.jdbc2.optional.MysqlConnectionPoolDataSource"&gt;
            &lt;Set name="Url"&gt;jdbc:mysql://localhost/mydatabase?characterEncoding=utf8&lt;/Set&gt;
            &lt;Set name="User"&gt;username&lt;/Set&gt;
            &lt;Set name="Password"&gt;password&lt;/Set&gt;
        &lt;/New&gt;
    &lt;/Arg&gt;
    &lt;/New&gt;
&lt;/Configure&gt;
</code></pre>

<p>Normally this goes into src/main/webapp/WEB-INF, but you probably don&#8217;t want to deploy that with your app in your production war file. So instead I put mine in src/test/jetty/jetty-env.xml. You&#8217;ll need to modify your Start.java to tell Jetty to find the relocated config file.</p>

<pre><code>EnvConfiguration envConfiguration = new EnvConfiguration();
URL url = new File("src/test/jetty/jetty-env.xml").toURI().toURL();
envConfiguration.setJettyEnvXml(url);
bb.setConfigurations(new Configuration[]{
    new WebInfConfiguration(),
    envConfiguration,
    new WebXmlConfiguration()
});
</code></pre>

<p>I found that I also had to set a couple of environment properties:</p>

<pre><code>System.setProperty("java.naming.factory.url.pkgs",
                   "org.eclipse.jetty.jndi");
System.setProperty("java.naming.factory.initial",
                   "org.eclipse.jetty.jndi.InitialContextFactory");
</code></pre>

<p>With this, I can finally access my JNDI datasource happily from Wicket/Jetty.</p>

<p>Update: I&#8217;ve created a <a href="https://gist.github.com/1539302">gist with the full source code.</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Automatically generate Maven dependency coordinates for random Jar files]]></title>
    <link href="http://armhold.github.com/2011/09/03/automatically-generate-maven-dependency-coordinates-for-random-jar-files/"/>
    <updated>2011-09-03T12:07:38-04:00</updated>
    <id>http://armhold.github.com/2011/09/03/automatically-generate-maven-dependency-coordinates-for-random-jar-files</id>
    <content type="html"><![CDATA[<p>Have you just inherited an Ant project that you&#8217;re trying to convert to Maven? Maybe it came with a &#8220;lib&#8221; directory full or random jar files. And worse, some thoughtless developer neglected to include version strings in the filenames?</p>

<p>Fear not! The Sonatype <a href="https://repository.sonatype.org/service/local/lucene/search?sha1=%22;">checksum search</a>Â REST service can give you the Maven coordinates based on the jar&#8217;s SHA1 hash.</p>

<p>Still too much work? Not to worry, I just wrote a quick program to make it even easier for you. <a href="https://github.com/armhold/Provenance">Provenance</a> will take a directory full of jar files and write out the XML dependency information for every jar it finds. You can then copy/paste this right into the <code>&lt;dependencies&gt;</code> section of your pom.xml.</p>

<p>Enjoy.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Adding Git SHAs to Wicket Pages Automatically]]></title>
    <link href="http://armhold.github.com/2011/08/04/adding-git-shas-to-wicket-pages-automatically/"/>
    <updated>2011-08-04T15:58:34-04:00</updated>
    <id>http://armhold.github.com/2011/08/04/adding-git-shas-to-wicket-pages-automatically</id>
    <content type="html"><![CDATA[<p>If you have a non-trivial project, it&#8217;s handy to be able to tell what code was used to build a particular release once it&#8217;s been deployed. Especially if you&#8217;ve recently discovered the joys of branching and merging with Git.</p>

<p>Here&#8217;s a handy way to <strong>add a Git SHA</strong> to all your app&#8217;s pages via <strong>Wicket and Maven</strong>.</p>

<h1>Maven</h1>

<p>First, we&#8217;ll use the exec-maven-plugin to create a git.properties file for us. Add this to the <plugins> section in your pom.xml:</p>

<pre><code>&lt;plugin&gt;
   &lt;groupId&gt;org.codehaus.mojo&lt;/groupId&gt;
   &lt;artifactId&gt;exec-maven-plugin&lt;/artifactId&gt;
   &lt;version&gt;1.1&lt;/version&gt;
   &lt;executions&gt;
       &lt;execution&gt;
          &lt;phase&gt;compile&lt;/phase&gt;
          &lt;goals&gt;
             &lt;goal&gt;exec&lt;/goal&gt;
          &lt;/goals&gt;
       &lt;/execution&gt;
   &lt;/executions&gt;
   &lt;configuration&gt;
       &lt;executable&gt;git&lt;/executable&gt;
       &lt;arguments&gt;
            &lt;argument&gt;log&lt;/argument&gt;
            &lt;argument&gt;--pretty=format:gitsha=%H %ci&lt;/argument&gt;
            &lt;argument&gt;-n1&lt;/argument&gt;
       &lt;/arguments&gt;
       &lt;outputFile&gt;target/classes/git.properties&lt;/outputFile&gt;
   &lt;/configuration&gt;
&lt;/plugin&gt;
</code></pre>

<p>This will create a git.properties file containing the Git SHA, along with the commit timestamp whenever your code is compiled. You can learn how to further customize this <a href="http://www.kernel.org/pub/software/scm/git/docs/git-log.html">here</a>.</p>

<h1>Wicket Application Subclass</h1>

<p>Now we&#8217;ll need to read in the git.properties file when our application starts up.</p>

<pre><code>public class Application extends WebApplication
{
    private String gitSHA;

    public AppgravityApplication()
    {
        java.util.Properties props = new java.util.Properties();
        try
        {
            props.load(Thread.currentThread().getContextClassLoader().getResourceAsStream("git.properties"));
            gitSHA = props.getProperty("gitsha");
            log.info("gitsha: " + gitSHA);
        }
        catch (IOException e)
        {
            log.severe(e.getMessage());
            gitSHA = "unknown";
        }
    }

    public String getGitSHA()
    {
        return gitSHA;
    }
</code></pre>

<h1>Wicket WebPage Subclass</h1>

<p>Now we&#8217;ll create a WebPage subclass that renders the Git SHA into a <meta> tag when the page is rendered.</p>

<pre><code>public abstract class MyPage extends WebPage
{
    @Override
    protected void onBeforeRender()
    {
        Label metaGitSHA = new Label("metaGitSHA", "");
        metaGitSHA.add(new AttributeModifier("content", Model.of(((Application) getApplication()).getGitSHA())));
        addOrReplace(metaGitSHA);
        super.onBeforeRender();
    }
}
</code></pre>

<p>You&#8217;ll want to extend MyPage for each of your pages. You&#8217;ll need to add the placeholder meta tag to each of your HTML pages like this:</p>

<pre><code>&lt;head&gt;
    &lt;meta wicket:id="metaGitSHA" id="metaGitSHA" name="metaGitSHA" content=""/&gt;
&lt;/head&gt;
</code></pre>

<p>And you&#8217;re done!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pixlshare- an image sharing app]]></title>
    <link href="http://armhold.github.com/2011/06/06/pixlshare-an-image-sharing-app/"/>
    <updated>2011-06-06T18:27:00-04:00</updated>
    <id>http://armhold.github.com/2011/06/06/pixlshare-an-image-sharing-app</id>
    <content type="html"><![CDATA[<p><a href="http://pixlshare.com/">Pixlshare</a> is a new image-sharing webapp that I just started working on. It&#8217;s intended to be a low-friction way to do simple image sharing- upload an image and instantly get a URL that you can share with others. No accounts or logins needed- just click upload and you&#8217;re done.</p>

<p><a href="http://pixlshare.com/images/trzlX8"><img src="http://pixlshare.com/images/trzlX8" alt="" /></a></p>

<p>It&#8217;s built in Wicket and tiny bit of JQuery. It&#8217;s fairly basic, but it has one fairly novel feature- you can add textual annotations to your uploaded images; the annotations appear as actual searchable text, rather than merely being part of the image bits.</p>

<p>I&#8217;m planning to add features like:</p>

<ul>
<li><p>HTML5 drag-n-drop for uploads</p></li>
<li><p>upload multiple pictures at once to create an album</p></li>
<li><p>user comments</p></li>
</ul>


<p><a href="http://pixlshare.com/">Give it a try!</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to make Ajax links crawlable with GWT and Google App Engine]]></title>
    <link href="http://armhold.github.com/2011/01/07/how-to-make-ajax-links-crawlable-with-gwt-and-google-app-engine/"/>
    <updated>2011-01-07T13:18:11-05:00</updated>
    <id>http://armhold.github.com/2011/01/07/how-to-make-ajax-links-crawlable-with-gwt-and-google-app-engine</id>
    <content type="html"><![CDATA[<p>If you care about <a href="http://en.wikipedia.org/wiki/Search_engine_optimization">SEO</a> you know that using GWT has a downside: much of your app&#8217;s content is generated dynamically via Javascript, and is therefore invisible to search engines. You might have dozens of pages of awesome content, but all the Googlebot sees is the static HTML page that hosts your app. This can be a real problem.</p>

<p>Fortunately, Google has proposed a <a href="http://code.google.com/web/ajaxcrawling/docs/getting-started.html">solution</a> for crawling ajax content:</p>

<ul>
<li><p>change your hrefs to support &#8220;bang notation&#8221;:Â Â www.example.com/ajax.html<strong>#!key=value</strong></p></li>
<li><p><strong>when Googlebot makes requests of the form: </strong>www.example.com/ajax.html<strong>?<em>escaped_fragment</em>=key=value </strong><strong>, you return a static HTML version of the Ajax content</strong></p></li>
</ul>


<p>So then the problem becomes one of generating static content from your Ajax links. You could do that by hand if your site is small and changes infrequently. More likely you&#8217;ll want a way to automate this.</p>

<p>Google recommends using a &#8220;headless browser&#8221; approach, i.e. using something like <a href="http://htmlunit.sourceforge.net/">HtmlUnit</a>. That&#8217;s a fine solution, but if you&#8217;re running on App Engine <em>it&#8217;s almost guaranteed not to work</em> because of the request timeout. Â So if you want to run on App Engine, you&#8217;re probably going to have to spider your own pages and pre-generate your HTML content.</p>

<p>My solution to this problem is to break the spidering up into small chunks, and farm them out as tasks onÂ App Engine&#8217;s <a href="http://code.google.com/appengine/docs/java/taskqueue/overview.html">Task Queues</a>. Whenever I update my app&#8217;s content, I submit a job that spiders the landing page looking for Ajax links. For each link that&#8217;s found, I submit a task that recursively spiders the link (taking care not to get into loops). Each task saves the HTML content into the data store, which is then returned as cached static content to Googlebot.</p>

<p>Suddenly my &#8220;simple&#8221; solution is sounding quite complicated, but it gets the job done reliably. Here&#8217;s some code to make it clearer.</p>

<p>I use a CachedAjaxLink data object to persist the static content:</p>

<pre><code>public class CachedAjaxLink implements Serializable
{
    @Id
    private String href;
    private String cachedContent;
    private Date dateCached;
}
</code></pre>

<p>Then I use an AjaxCacher which crawls a given link, stores the results as CachedAjaxLinks, and queues Task Queue tasks for each link that it finds:</p>

<pre><code>public class AjaxCacher
{
    protected static final Logger log = Logger.getLogger(AjaxCacher.class.getName());
    protected static final DAO dao = new DAO();

    public static final long PUMP_TIME = 5000;
    protected WebClient webClient;
    protected String crawlServletUrl;

    public AjaxCacher(String crawlServletUrl)
    {
        this.crawlServletUrl = crawlServletUrl;
        webClient = Holder.get();
    }

    public void crawl(URL urlToCrawl, Date crawlRequestTimestamp)
    {
        // URLs we've already queued
        Set queuedURLs = new HashSet();
        queuedURLs.add(urlToCrawl);

        try
        {
            HtmlPage page = webClient.getPage(urlToCrawl);

            // appengine hack because it's single threaded
            webClient.getJavaScriptEngine().pumpEventLoop(PUMP_TIME);

            String pageContent = page.asXml();

            CachedAjaxLink cachedAjaxLink = new CachedAjaxLink();
            cachedAjaxLink.setHref(urlToCrawl.getRef());
            cachedAjaxLink.setCachedContent(pageContent);
            cachedAjaxLink.setDateCached(new Date());  // time actually cached
            dao.updateCachedAjaxLink(cachedAjaxLink);

            List anchors = page.getAnchors();
            for (HtmlAnchor anchor : anchors)
            {
                // only care about ajax links
                if (! anchor.getHrefAttribute().startsWith("#")) continue;

                URL newUrl = new URL(urlToCrawl, anchor.getHrefAttribute());

                // don't queue multiple requests for the same URL
                if (queuedURLs.contains(newUrl)) continue;

                queuedURLs.add(newUrl);

                // prevent loops
                CachedAjaxLink link = dao.getCachedAjaxLink(newUrl.getRef());
                if (link == null || link.getDateCached().getTime() &lt; crawlRequestTimestamp.getTime())
                {
                    queueCrawlRequest(newUrl.toString(), crawlRequestTimestamp);
                }
            }

        } catch (IOException e)
        {
            log.log(Level.SEVERE, e.getMessage(), e);
        }
        finally
        {
            webClient.closeAllWindows();
        }
    }

    /**
     * submits a crawl request to the queue; TaskQueueServlet will then handle the request asynchronously
     */
    public void queueCrawlRequest(String urlToCrawl, Date timeStamp)
    {
        Queue queue = QueueFactory.getDefaultQueue();
        TaskOptions options = TaskOptions.Builder.url(crawlServletUrl);
        options.param("encodedUrl", ServerUtils.encodeURL(urlToCrawl));
        options.param("timeStamp", ServerUtils.fromDate(timeStamp));
        options.method(TaskOptions.Method.GET);
        queue.add(options);
    }

    /**
     * try to cache a copy of the WebClient in ThreadLocal for faster startups on Google App Engine
     */
    public static class Holder
    {
        private static ThreadLocal holder = new ThreadLocal()
        {
            protected synchronized WebClient initialValue()
            {
                WebClient result = new WebClient(BrowserVersion.FIREFOX_3);
                result.setWebConnection(new UrlFetchWebConnection(result));
                return result;
            }
        };

        public static WebClient get()
        {
            return holder.get();
        }
    }
}
</code></pre>

<p>Finally, I use a TaskQueueServlet to handle the queued tasks:</p>

<pre><code>public class TaskQueueServlet extends HttpServlet
{
    @Override
    protected void doGet(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException
    {
        doPost(req, res);
    }

    @Override
    protected void doPost(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException
    {
        String encodedUrl = req.getParameter("encodedUrl");
        if (encodedUrl == null)
        {
            throw new IllegalArgumentException("missing param: encodedUrl");
        }

        String timeStamp = req.getParameter("timeStamp");
        if (timeStamp == null)
        {
            throw new IllegalArgumentException("missing param: timeStamp");
        }

        String decodedUrl = ServerUtils.decodeURL(encodedUrl);
        URL urlToCrawl = new URL(decodedUrl);

        getServletContext().getInitParameter("taskQueuePath");
        AjaxCacher cacher = new AjaxCacher(getServletContext().getInitParameter("taskQueuePath"));
        cacher.crawl(urlToCrawl, ServerUtils.toDate(timeStamp));
    }
}
</code></pre>

<p>Thanks Google, for making it so easy. ;-)</p>

<p>You can grab all of this code from my <a href="http://code.quickbrownfrog.com/">gwtquickstarter</a> library.Â It&#8217;s the library that powers the <a href="http://www.quickbrownfrog.com">best typing tutor</a> on the web.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Add a badge to your blog with your typing score!]]></title>
    <link href="http://armhold.github.com/2010/12/28/add-a-badge-to-your-blog-with-your-typing-score/"/>
    <updated>2010-12-28T10:45:09-05:00</updated>
    <id>http://armhold.github.com/2010/12/28/add-a-badge-to-your-blog-with-your-typing-score</id>
    <content type="html"><![CDATA[<p>Did you get an awesome word-per-minute score on your Quick Brown Frog typing speed test? Well now you can share it with the world by posting a Quick Brown Frog badge on your blog or website:
<a href="http://quickbrownfrog.com#!practice:"><img src="http://armhold.github.com/images/2010/12/typing-badge.png" alt="" /></a></p>

<p>We just added a <a href="http://quickbrownfrog.com#!practice:">new feature</a> to all our typing practice sessions- at the end of the lesson you&#8217;ll be shown the badge and the HTML code that generates it. Simply copy and paste the blue HTML code into your blog or website to add the badge for all to see.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[New Feature: create a typing practice from random English words]]></title>
    <link href="http://armhold.github.com/2010/12/28/new-feature-create-a-typing-practice-from-random-english-words/"/>
    <updated>2010-12-28T10:30:10-05:00</updated>
    <id>http://armhold.github.com/2010/12/28/new-feature-create-a-typing-practice-from-random-english-words</id>
    <content type="html"><![CDATA[<p>We&#8217;ve been busy adding new features over the Christmas holidays. The first of these is already available for you to use: you can now create a practice typing session from a set of <a href="http://www.quickbrownfrog.com/#!practice:">random English words</a>:</p>

<p><a href="http://quickbrownfrog.com#!practice:"><img src="http://armhold.github.com/images/2010/12/type-random-words1.png" alt="type random words" /></a></p>

<p>We&#8217;ve had numerous requests from users for a feature that would generate random typing lessons based on actual words. You can now generate instant typing practices, simply by choosing the number of words you wish to type.</p>

<p><a href="http://quickbrownfrog.com#!practice:"><img src="http://armhold.github.com/images/2010/12/random-word-lesson.png" alt="Random word typing practice" /></a></p>

<p>We&#8217;re planning to extend this feature in the future to create automatically create lessons targeting letters that you need to practice (the ones you make the most typos with).</p>

<p>Enjoy!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Quick Brown Frog is now available in the Chrome Web Store]]></title>
    <link href="http://armhold.github.com/2010/12/09/quick-brown-frog-is-now-available-in-the-chrome-web-store/"/>
    <updated>2010-12-09T11:46:25-05:00</updated>
    <id>http://armhold.github.com/2010/12/09/quick-brown-frog-is-now-available-in-the-chrome-web-store</id>
    <content type="html"><![CDATA[<p>The <a href="http://www.quickbrownfrog.com">best typing tutor on the web</a> is now available for sale in the <a href="https://chrome.google.com/webstore/detail/cngicknllndfldloclinjdfgjdbagkfn">Chrome Web Store</a>.</p>

<p><a href="https://chrome.google.com/webstore/detail/cngicknllndfldloclinjdfgjdbagkfn"><img src="http://armhold.github.com/images/2010/12/screen-shot-2010-12-09-at-4-33-25-pm.png" alt="" /></a></p>

<p>It was surprisingly easy to <a href="http://code.google.com/chrome/webstore/docs/get_started_simple.html">get into the store</a> if you&#8217;ve got an existing webapp running:</p>

<ul>
<li><p>pay Google $5 (one-time developer fee; <strong>not</strong> per-app)</p></li>
<li><p>create a 16-line JSON manifest file</p></li>
<li><p>take some screen shots and create an icon (the hardest part, really)</p></li>
<li><p>bundle it into a zip</p></li>
<li><p>checkmark a few boxes, add some descriptive text, click &#8220;publish&#8221;</p></li>
</ul>


<p>All you are really doing is bundling up some meta-data so that Chrome users can see your app as being &#8220;installed&#8221;. Even though my app is very much server-dependent, and has its own concept of user accounts and payments, Google is happy to have it in the store. And I&#8217;m happy for the potential extra customers.</p>

<p>It&#8217;s obvious that the Chrome Web Store is a great boon for developers. However it&#8217;s unclear whether users will actually find this useful, much less flock to it.</p>

<p>My guess is that once we start seeing more apps that <em>really</em> use HTML5 features like local storage, it might take off. I hope it does.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Patrick McKenzie launches Appointment Reminder]]></title>
    <link href="http://armhold.github.com/2010/12/06/patrick-mckenzie-launches-appointment-reminder/"/>
    <updated>2010-12-06T05:43:37-05:00</updated>
    <id>http://armhold.github.com/2010/12/06/patrick-mckenzie-launches-appointment-reminder</id>
    <content type="html"><![CDATA[<p>Patrick McKenzie, a solo entrepreneur whom I admire greatly has launched his second project: <a href="https://www.appointmentreminder.org/">Appointment Reminder</a>.</p>

<p>Appointment Reminder is a service for personal business services (think: hair salons, medical offices, law firms, or anyone that regularly schedules appointments with clients). Appointment Reminder sends out reminders to clients automatically, via phone, SMS or email. Fewer forgotten appointments = increased revenue.</p>

<p>He&#8217;s leveraging <a href="http://www.twilio.com/">Twilio</a>, and API that I&#8217;m just dying to find an excuse to use.</p>

<p>Congrats Patrick, and good luck!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[UI Refresh- new logo and other eye candy]]></title>
    <link href="http://armhold.github.com/2010/11/30/ui-refresh-new-logo-and-other-eye-candy/"/>
    <updated>2010-11-30T11:31:35-05:00</updated>
    <id>http://armhold.github.com/2010/11/30/ui-refresh-new-logo-and-other-eye-candy</id>
    <content type="html"><![CDATA[<p>I spent some time (and some $$) prettying up the <a href="http://www.quickbrownfrog.com">Quick Brown Frog</a> user interface.
I bought aÂ logo fromÂ <a href="http://www.logosamurai.com/">Logosamurai</a>. Â Not bad for $67.</p>

<p><a href="http://armhold.github.com/images/2010/11/alternate-edit.jpg"><img src="http://armhold.github.com/images/2010/11/alternate-edit.jpg" alt="Quick Brown Frog logo" /></a></p>

<p>Then I added some gauges to display WPM and accuracy in real-time. They&#8217;re part of the <a href="http://code.google.com/apis/visualization/documentation/gadgetgallery.html">Google Visualization API</a>, and they&#8217;re awesome. Â That is, when they work. They don&#8217;t seem to work in IE8, so I&#8217;ve disabled them for that browser.</p>

<p>And they have some pretty odd resizing behavior: if you don&#8217;t explicitly specify a width attribute, the gauges will <em>shrink</em> every time you update the gauge value. It took me quite a bit of experimentation to figure that one out, but thankfully it seems to be working now.</p>

<p><a href="http://armhold.github.com/images/2010/11/gauges.png"><img src="http://armhold.github.com/images/2010/11/gauges.png" alt="speed test gauges" /></a></p>

<p>You can check out the changes in this <a href="http://www.quickbrownfrog.com/#!speedTest:">typing speed test</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Quick Brown Frog Typing Tutor is launched!]]></title>
    <link href="http://armhold.github.com/2010/11/25/quick-brown-frog-is-launched/"/>
    <updated>2010-11-25T04:34:18-05:00</updated>
    <id>http://armhold.github.com/2010/11/25/quick-brown-frog-is-launched</id>
    <content type="html"><![CDATA[<p>After lots of helpful feedback from beta testers and Hacker News, my <a href="http://www.quickbrownfrog.com">typing tutor</a> app &#8220;Quick Brown Frog&#8221; is live and open for business!</p>

<p>Some of the things I changed in response to feedback include:</p>

<ul>
<li><p><a href="http://www.quickbrownfrog.com/#!store:">price reduction</a> from $29.95 -> $9.95</p></li>
<li><p>support both Google Checkout and Paypal options for payment</p></li>
<li><p><a href="http://www.quickbrownfrog.com/#!progress:">stats reporting</a> (WPM/Accuracy improvement over time)</p></li>
<li><p>report on frequently mis-typed keys after practice lessons</p></li>
<li><p>allow automatic single/double spacing after end of sentences (<em>very</em> frequently requested)</p></li>
<li><p>implemented crawlable Ajax links for SEO</p></li>
<li><p>plus many bug fixes for cross-browser compatibility</p></li>
</ul>


<p>I consider this an <a href="http://en.wikipedia.org/wiki/Minimum_viable_product">MVP-level</a> release, which means that it still needs lots of work and polish (in particular, the look-and-feel of the UI).</p>

<p>The important thing is to get it out there, and start getting feedback from actual customers. Absent that, I&#8217;d just be spinning my wheels.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Measuring Typing Accuracy]]></title>
    <link href="http://armhold.github.com/2010/11/22/measuring-typing-accuracy/"/>
    <updated>2010-11-22T05:38:25-05:00</updated>
    <id>http://armhold.github.com/2010/11/22/measuring-typing-accuracy</id>
    <content type="html"><![CDATA[<p>It turns out that measuring typing accuracy (how accurately you hit the intended keys) is non-trivial.Â A quick survey
of the online typing courses out there shows that there is considerable confusion over how to correctly measure typing
accuracy. One site actually gives aÂ <em>negative percentage</em> if you backspace too many times!</p>

<p>This was kind of surprising to me. I figured it would take me perhaps 10 minutes to implement. It ended up taking
a day and a half of my time, $10 spent on an ACM article, and some quality time with a recent CS grad&#8217;s
<a href="http://www.dynamicnetservices.com/~will/academic/Soukoreff%20PhD%20Dissertation.pdf">PhD thesis</a>. No joke.</p>

<p>Well, to be completely honest, in the end, the implementation <em>was</em> in fact fairly trivial. What was hard was
figuring out <em>what to measure</em>. It&#8217;s more of a human problem than a technical one.</p>

<h3>Why is this hard?</h3>

<p>Your intuition might be to simply measure the ratio of correct characters to total characters typed. At first glance
this seems OK, but consider the following case:</p>

<pre style="font-family:Monospace; font-size: 14pt;">
    intended: The quick brown frog jumped over the lazy fox.<br/>
    actual  : The qu<span style="color:#993300">ck brown frog jumped over the lazy fox.</span>
</pre>


<p>If we match up the typed characters with what was expected, the accuracy of this typed statement is a very low 15 %. But looking at it from a human perspective, what were the actual errors here? The typist missed the &#8220;i&#8221; character in the word &#8220;quick&#8221;, and as a result the rest of the line was offset by one. Â It seems like there ought to be a way to more accurately capture the fact that the user made a single typo. There is.</p>

<h3>Edit Distance</h3>

<p><a href="http://en.wikipedia.org/wiki/Edit_distance">Edit Distance</a> is the number of operations required to transform one
string into another. The operations include <em>insertion</em>, <em>deletion</em> and <em>substitution</em>.Â In this example, it requires
only a single edit- &#8216;insert an i&#8217;.</p>

<p>Soukoreff&#8217;s <a href="http://www.dynamicnetservices.com/~will/academic/Soukoreff%20PhD%20Dissertation.pdf">thesis</a> describes
a <em>Minimum String Distance Error Rate</em> as the Edit Distance divided by the maximum of the lengths of the presented
vs typed text, times 100%. For our &#8220;off by one&#8221; example above, the error rate is a mere 2%, i.e. 98% accurate.
That seems more reasonable!</p>

<p>So for a while I was using the <a href="http://en.wikipedia.org/wiki/Levenshtein_distance">Levenshtein Distance algorithm</a>
to compute the edit distance, and hence the accuracy. This certainly worked better than my initial naive algorithm,
but it still had a problem- What if the typist made <em>lots</em> of errors, but was fastidious about backspacing over the
mistakes and correcting them? His error rate would be zero in this case, with an accuracy of 100%.</p>

<p>While correcting all your mistakes is admirable, it seems wrong to award a &#8220;100% accurate&#8221; rating to a typist
sporting a bruised backspace key. Somehow, we&#8217;ve got to take the mistakes into account, even if they&#8217;ve been corrected.</p>

<h3>Text-Entry Taxonomy</h3>

<p>Soukoreff&#8217;s PhD thesis again provides a solution. Classify each of the keystrokes into one of the following categories:</p>

<ul>
<li><p><strong>C</strong> - Correctly typed</p></li>
<li><p><strong>IF</strong> - Incorrect, but Fixed</p></li>
<li><p><strong>INF</strong> - Incorrect, Not Fixed</p></li>
<li><p><strong>F</strong> - Fixes, i.e. backspace or cursor movement used to correct mistakes</p></li>
</ul>


<p>Using these classifications, he proposes a <em>Total Error Rate</em> defined as:</p>

<blockquote><p>(INF + IF) / (C + INF + IF) * 100%</p></blockquote>

<p>So, going back to our &#8220;off by one&#8221; example, if the typist noticed immediately that he missed the &#8216;i&#8217; in &#8216;quick&#8217;,
and backspaced to correct it,</p>

<pre style="font-family:Monospace; font-size: 14pt;">
The qu<span style="color:#993300;">c</span>â«ick brown frog jumped over the lazy fox.
</pre>


<p>the breakdown would be C: 47, F: 1, IF: 1,. INF: 0, for a total error rate of (0 + 1) / (47 + 0 + 1) = 2%, or 98%
accurate. Same as using the Edit Distance alone, in this example.</p>

<p>But what if the user didn&#8217;t notice the mistake until 10 characters later? The input stream would look something
like this:</p>

<pre style="font-family:Monospace; font-size: 14pt;">
The qu<span style="color:#993300;">ck brown f</span>â«â«â«â«â«â«â«â«â«â«ick brown frog jumped over the lazy fox.
</pre>


<p>What&#8217;s the error rate now? C:47, F:10, IF: 10, INF: 0, or (0 + 10) / (47 + 0 + 10) * 100% = 17.5%, or roughly
82% accurate. Aha!</p>

<p>I plugged this formula into <a href="http://www.quickbrownfrog.com">Quick Brown Frog</a> and watched the error rate go up and
down while typing. <em>Finally</em>, it seemed to be doing the right thing- rewarding accurate, deliberate typing, and taking
off points for outright mistakes as well expensive corrections.</p>

<p>Yet another example of why it&#8217;s hard to estimate software schedules- sometimes the &#8216;trivial&#8217; is anything but.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Quick Brown Frog featured on StartupLift!]]></title>
    <link href="http://armhold.github.com/2010/11/17/quick-brown-frog-featured-on-startuplift/"/>
    <updated>2010-11-17T16:05:34-05:00</updated>
    <id>http://armhold.github.com/2010/11/17/quick-brown-frog-featured-on-startuplift</id>
    <content type="html"><![CDATA[<p>I&#8217;m happy to report that <a href="http://StartupLift.com">StartUpLift.com</a>, an awesome new site for promoting new startups, is featuring Quick Brown Frog.</p>

<p><a href="http://startuplift.com/quick-brown-frog-learn-to-touch-type/">http://startuplift.com/quick-brown-frog-learn-to-touch-type/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[how to resolve App Engine timeouts when parsing web.xml]]></title>
    <link href="http://armhold.github.com/2010/11/17/how-to-resolve-app-engine-timeouts-when-parsing-web-xml/"/>
    <updated>2010-11-17T12:09:48-05:00</updated>
    <id>http://armhold.github.com/2010/11/17/how-to-resolve-app-engine-timeouts-when-parsing-web-xml</id>
    <content type="html"><![CDATA[<p>For a few weeks now I&#8217;ve been plagued with timeouts while updating my App Engine apps. At first I thought it was a problem in the Intellij EAP beta I was running, but today I spent some time digging into it.</p>

<p>It seems to be unrelated to the EAP, as I get the same behavior with the App Engine command-line tools- timeout failure parsing web.xml roughly 75% of the time. It looks like this:</p>

<blockquote><p>Nov 17, 2010 4:32:54 PM com.google.apphosting.utils.config.AbstractConfigXmlReader readConfigXml
SEVERE: Received exception processing /Users/armhold/work/git-mega-repo/mystore/out/artifacts/Typing_Web_exploded/WEB-INF/web.xml
com.google.apphosting.utils.config.AppEngineConfigException: Received IOException parsing the input stream for /Users/armhold/work/git-mega-repo/mystore/out/artifacts/Typing_Web_exploded/WEB-INF/web.xml
at com.google.apphosting.utils.config.AbstractConfigXmlReader.getTopLevelNode(AbstractConfigXmlReader.java:210)
at com.google.apphosting.utils.config.AbstractConfigXmlReader.parse(AbstractConfigXmlReader.java:228)
at com.google.apphosting.utils.config.WebXmlReader.processXml(WebXmlReader.java:142)
at com.google.apphosting.utils.config.WebXmlReader.processXml(WebXmlReader.java:22)
at com.google.apphosting.utils.config.AbstractConfigXmlReader.readConfigXml(AbstractConfigXmlReader.java:111)
at com.google.apphosting.utils.config.WebXmlReader.readWebXml(WebXmlReader.java:73)
at com.google.appengine.tools.admin.Application.(Application.java:105)
at com.google.appengine.tools.admin.Application.readApplication(Application.java:151)
at com.google.appengine.tools.admin.AppCfg.(AppCfg.java:115)
at com.google.appengine.tools.admin.AppCfg.(AppCfg.java:61)
at com.google.appengine.tools.admin.AppCfg.main(AppCfg.java:57)
Caused by: java.net.ConnectException: Operation timed out
After some <a href="http://code.google.com/p/googleappengine/issues/detail?id=1235#c15">digging around</a>, it seems to be related to a timeout deep in the bowels of Java&#8217;s XML libs while trying to validate the DTD for web.xml.</p></blockquote>

<p>The fix is simple: elide the DTD declaration from the top of your web.xml:</p>

<blockquote><p>&lt;!DOCTYPE web-appÂ Â  Â PUBLIC &#8220;-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN&#8221;Â Â  Â &#8221;http://java.sun.com/dtd/web-app_2_3.dtd&#8221;></p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Implementing a keyboard in CSS]]></title>
    <link href="http://armhold.github.com/2010/11/14/implementing-a-keyboard-in-css/"/>
    <updated>2010-11-14T08:53:37-05:00</updated>
    <id>http://armhold.github.com/2010/11/14/implementing-a-keyboard-in-css</id>
    <content type="html"><![CDATA[<p>The predictive keyboard in <a href="http://www.quickbrownfrog.com/#typing:scottish_terrier.xml:0">QuickBrownFrog</a> has gone through three major iterations so far. At first, I really didn&#8217;t expect to be able to implement a functional keyboard in GWT (i.e. Javascript+CSS), so I set about drawing the keyboard using Omnigraffle.</p>

<h3>Round 1 - Static Images</h3>

<p><a href="http://armhold.github.com/images/2010/11/h.png"><img src="http://armhold.github.com/images/2010/11/h.png" alt="static keyboard image from Omnigraffle" /></a></p>

<p>It was fairly easy to whip up the initial design. But then in order to implement key selection I had to create about 100 variations of this with all the different keys selected. That was painful.</p>

<p>GWT provides a way to <a href="http://code.google.com/webtoolkit/doc/latest/DevGuideUiImageBundles.html">bundle image resources</a>, and that helped keep the image size in check, but it was still a bit slow on the client until all the images were cached. Unfortunately this also meant that I had to create a mongo ImageResources.java interface, which listed every foo_key() foo_keyShifted(), etc.</p>

<p>So this clearly wasn&#8217;t optimal, but it worked for a while. Then when I decided it was time to change the &#8220;selected&#8221; color, and I had to manually re-color every single PNG.Â Obviously, this was not going to scale, and it was time to re-think my approach. So I set about experimenting with ways to programmatically generate the keyboard.</p>

<h3>Round 2 - SVG</h3>

<p>First up, I went with SVG. The SVG Canvas is not natively supported in every browser, but the <a href="http://code.google.com/p/gwt-graphics/">GWT-Graphics library</a> gracefully uses VML in Internet Explorer, making it effectively cross-platform. This worked pretty well, and after a day and a half tweaking the layout, I had a functional SVG keyboard. And finallyÂ I was able to change the look of the keys (color, shape, etc) very easily with a couple lines of code. I was thrilled!</p>

<p>Unfortunately VML on IE was still kind of slow, and also had some occasional rendering problems. Still, this was far better than a huge set of static images, so I stuck with SVG for a while. When it came time to re-design the website with a new color scheme I was really thrilled to not have to update 100+ keyboard images in Omnigraffle again.!</p>

<p>Round 3 - CSS</p>

<p>With launch-time approaching, the speed issues with VML have really started to become a problem. Clearly, aÂ <em>predictive</em> keyboard needs to be faster than the typist using it, and my keyboard was not keeping up. That led me to my third iteration- CSS.</p>

<p>Since my SVGKeyboard.java was created as an <a href="http://google-web-toolkit.googlecode.com/svn/javadoc/2.1/index.html?overview-summary.html">AbsolutePanel</a> subclass, it was fairly straightforward to re-implement it in regular old GWT. Instead of an SVG rect, each key is now simply an AbsolutePanel, with <a href="http://google-web-toolkit.googlecode.com/svn/javadoc/2.1/index.html?overview-summary.html">InlineLabels</a> for keycaps.</p>

<p>Implementing the &#8220;selected&#8221; coloring is as simple as adding and removing a CSS style that specifies theÂ color andÂ background-color. I was even able to make the keys look rounded with the following bit of CSS magic:</p>

<pre><code>-moz-border-radius: 4px;
Â border-radius: 4px;
</code></pre>

<p>It&#8217;s perhaps not as pretty as my original Omnigraffle drawing, but that seems a small sacrifice to make for ease of maintenance, should I decide to tweak the design in the future. Plus there&#8217;sÂ the performance improvement- typing really flies now!</p>

<p><a href="http://armhold.github.com/images/2010/11/css_keyboard.png"><img src="http://armhold.github.com/images/2010/11/css_keyboard.png?w=300" alt="CSS Keyboard" /></a></p>
]]></content>
  </entry>
  
</feed>
